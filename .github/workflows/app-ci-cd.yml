name: CI/CD – FastAPI application

on:
  push:
    branches: [ "main" ]
    paths:
      - "fastapi-app/**"
      - ".github/workflows/app-ci-cd.yml"
      - "k8s/**"
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fastapi-app
  PYTHON_VERSION: "3.11"

jobs:
  build-test-publish:
    name: Unit tests → Build → Push
    runs-on: ubuntu-latest
    permissions:
      id-token: write 
      contents: read
    
    outputs:
      account_id: ${{ steps.meta.outputs.account_id }}
      short_sha:  ${{ steps.meta.outputs.short_sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install deps
      working-directory: fastapi-app
      run: |
        pip install -r requirements.txt
        pip install -r test-requirements.txt || true   # if you keep test deps separate

    - name: Run unit tests
      working-directory: fastapi-app
      run: pytest -q

    - name: Configure AWS credentials (OIDC)
      id: aws-creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-ecr
        aws-region: ${{ env.AWS_REGION }}

    - name: Capture AWS account ID
      id: account
      run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_ENV"

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set SHORT_SHA env var
      run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Build & push Docker image
      working-directory: fastapi-app
      env:
        REGISTRY: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        IMAGE_TAG: ${{ env.SHORT_SHA }}
      run: |
        IMAGE_URI=${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        docker build -t "${IMAGE_URI}" .
        docker push "${IMAGE_URI}"

        docker tag "${IMAGE_URI}" "${REGISTRY}/${ECR_REPOSITORY}:latest"
        docker push "${REGISTRY}/${ECR_REPOSITORY}:latest"

    - name: Export job-level outputs
      id: meta
      run: |
        echo "account_id=${ACCOUNT_ID}"   >> "$GITHUB_OUTPUT"
        echo "short_sha=${SHORT_SHA}"     >> "$GITHUB_OUTPUT"

  deploy:
    name: deploy
    needs: build-test-publish
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-ecr
        aws-region: ${{ env.AWS_REGION }}

    - name: Capture AWS account ID
      run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

    - name: Install kubectl & kustomize
      run: |
        curl -sLO "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -m 0755 kubectl /usr/local/bin/
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Update kubeconfig for EKS
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Inject image tag into overlay
      env:
        REGISTRY: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        IMAGE_TAG: ${{ needs.build-test-publish.outputs.short_sha }}
      run: |
        cd k8s/overlays/prod
        kustomize edit set image fastapi-app=${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

    - name: Apply manifests
      run: kubectl apply -k k8s/overlays/prod